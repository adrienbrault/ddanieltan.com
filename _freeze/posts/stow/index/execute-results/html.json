{
  "hash": "1bfa3d1b2b3ce49b21a37efb56edafeb",
  "result": {
    "markdown": "---\ntitle: \"How I sync my config files with Stow\"\ndescription: \"A simple system to keep chaos at bay\"\ndate: \"2022-08-27\"\ncategories: [tooling]\nimage: organized.png\n---\n\n# An organisational nightmare\nI have one machine for work, one machine for personal stuff and a bunch of servers for projects and school work. As I hop in and out of these separate computing systems, it gets pretty difficult to synchronise all my config files, settings, scripts and shortcuts.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![[DallE2](https://openai.com/dall-e-2/) art with prompt: 'Keeping things organized across multiple machines, digital art' ](organized.png)\n:::\n:::\n\n\nAs this is a common problem that plagues many programmer, it is unsurprising that there is a clever piece of software written to solve this problem - [Stow](https://www.gnu.org/software/stow/). Stow is a symlink manager that when coupled with any version control software (ie. git) can create a simple and effective config sync system. I have used such a system for the last couple of months and is something I can no longer live without. \n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">When you’ve written the same code 3 times, write a function<br><br>When you’ve given the same in-person advice 3 times, write a blog post</p>&mdash; David Robinson (@drob) <a href=\"https://twitter.com/drob/status/928447584712253440?ref_src=twsrc%5Etfw\">November 9, 2017</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nI find myself bringing up Stow pretty often in conversations so I wanted to take @drob's advice.\nHowever, as there are [many](https://dr563105.github.io/blog/manage-dotfiles-with-gnu-stow/) [excellent](https://alexpearce.me/2016/02/managing-dotfiles-with-stow/) [blogs](https://venthur.de/2021-12-19-managing-dotfiles-with-stow.html) that already do a great job of explain what Stow is, I think I can't add much value to that conversation. Instead, I'm going to shift my energy towards creating a straight-forward how-to recipe. I can imagine that for someone going through the frustration of sync-ing config files, a simple how-to is the 1st thing you would be looking for.\n\n# The Big Picture\nHere's the big picture of how a Stow-enabled config synchronisation system is setup.\n\n1. You will need a `dotfiles` version controlled repository. The simplest approach here would be a [Github repository](https://docs.github.com/en/get-started/quickstart/create-a-repo)\n\n2. In `dotfiles`, you will create separate folders for each application's config file you wish to keep in-sync. What you name these folders is totally up to you, but conventionally most name the folder after the application \n\nFor example, a simple `dotfiles` repo might look like this.\n```bash\n.\n├── aliases\n├── kitty\n└── nvim\n```\nHere, my intention is to sync my shell aliases, terminal configs ([Kitty](https://sw.kovidgoyal.net/kitty/)) and editor configs ([NeoVim](https://neovim.io/)), so I create a separate folder for each.\n\n3. Within each folder, you can create the config files that we want to be kept in-sync\n\n4. Using Stow, you can then create a symlink of these config files which would be placed in the right locations on your file system for the respective applications to read from\n\n5. Once this is set up, the day-to-day usage of this system is incredibly simple. Any time you make make edits to your config files on 1 machine, you simply need to commit and push the changes made in your `dotfiles` repo. Your config files are symlink-ed to the files in your `dotfiles` repo, and any edit you make will be updated. Next time you hop into a different machine, just pull down the latest changes in the `dotfiles` repo and all your configs will be updated\n\nSteps 3 and 4 are the tricky bits and I provide a more detailed example of them below.\n\n# Syncing a config file for the 1st time\nHere's an example scenario. I have 2 machines (A and B), and I want to sync the configurations for the terminal application, e.g. the [Kitty](https://sw.kovidgoyal.net/kitty/) terminal. To configure this terminal, you would edit a config file `kitty.conf` whose default location is `~/.config/kitty/kitty.conf`. Here's what you would do:\n\n:::{.column-margin}\nYes, I see the irony in using Kitty because it is a GPU-accelerated application whose primary function is to print out text...\n:::\n\n1. We start from machine A. Firstly, you will need to delete the existing `kitty.conf` file\n\n2. In your `dotfiles` repo, within the `kitty` folder, create a new `kitty.conf` file but make sure this file is in the exact same folder structure of the default config location. I.e. your new config file should sit in the `dotfiles` repo like this\n```bash\n.\n├── aliases\n├── kitty\n│   └── .config\n│       └── kitty\n│           └── kitty.conf\n└── nvim\n```\n\n3. Fill up `kitty.conf` with your desired settings\n\n4. Navigate back up to the `dotfiles` repo and run `stow kitty`. This command will create a symlink of the contents of the kitty folder, which will create a `kitty.conf` in the `~/.config/kitty/kitty.conf` location\n\n5. We are done setting up on Machine A. Commit and push the changes to your `dotfiles` repo\n\n6. Finally, log into to Machine B. Pull down the changes and because we have not ran stow before, you will need to run `stow kitty` here too to create the symlinks.\n\nStow is something you only need to run the 1st time you add a config file. You do not have to run `stow` for any subsequent edits.\n\n# Limitations\n\nThis config sync system is pretty sweet but it is not without some limitations. Here's a couple for you to be aware of.\n\nStowing too many config files can also get out of hand pretty quickly. You probably want to consider which applications you are genuinely using often enough across multiple machines, just so you avoid creating obsolete symlinks.\n\nAdditionally, there are some situations where you do not want config files sync-ed. For example, I don't use this system to sync my shell configs because those sometimes contain sensitive environment variables or have settings unique to the type of hardware the software is running on.\n\n# Conclusion\n> “Life truly begins when you put your house in order.”\n> - Marie Kondo\n\nCouldn't have phrased it better myself! Stow is a great tool to keep your config files sync-ed, do give it a try.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}