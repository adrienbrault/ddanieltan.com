[
  {
    "objectID": "posts/helloworld/index.html",
    "href": "posts/helloworld/index.html",
    "title": "Hello world",
    "section": "",
    "text": "Quarto\nOne reason why I got tempted to start a blog again is Quarto! Quarto is the shiny, new publishing framework (from RStudioPosit) that I use to publish this blog. Quarto is reminiscent of Rmarkdown, but rebuilt around the pandoc engine. Quarto feels purpose built for the entire data community, supporting all the major Data Science languages (Python, R, Julia, Javascript), and supporting a wide spectrum of output formats (pdf reports, websites, presentations and more).\nYou can see my unbridled enthusiasm after first learning about Quarto here.\n\n\n\n\n\n\n‚Ä¶along with my ‚Äúthis-is-a-huge-moment-in-history‚Äù hyperbole\n\n\nJumpstarting this blog\nThese were the best resources I found online to help me jump start this blog.\n\n1. Official Quarto Documentation (website and repos)\nThe official docs are extensive and well-written. Specific to building a blog, I frequently find myself on the website page, publishing page or thumbing through their gallery for inspiration.\n\n\n2. Danielle Navarro‚Äôs ‚ÄúPorting a Distill Blog to Quarto‚Äù (blog and repo)\nDanielle‚Äôs blog post is the perfect starting template. I found her recommended YAML settings, blog theme and deployment instructions very sensible and well-suited for a blog.\n\n\n3. The small but growing collection of Quarto content online\nAt the time of writing, I did not find a large collection of Quarto-specific content online. Nevertheless, I did find some helpful gems from Youtube videos, Github discussions or websites that had a helpful tip or two that I could use for my blog.\n\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{tan2022,\n  author = {Daniel Tan},\n  editor = {},\n  title = {Hello World},\n  date = {2022-07-15},\n  url = {https://www.ddanieltan.com/posts/helloworld},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nDaniel Tan. 2022. ‚ÄúHello World.‚Äù July 15, 2022. https://www.ddanieltan.com/posts/helloworld."
  },
  {
    "objectID": "posts/some2/index.html",
    "href": "posts/some2/index.html",
    "title": "Explainers: Inverse Transform Theorem",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\nset.seed(sum(utf8ToInt(\"SoME2\")))\n\n\n\nWorlds at our fingertips\nModern day computers are pretty amazing simulation machines.\nHere‚Äôs an example. Say that I am a Bottle Flipping enthusiast and I am eager to simulate 100 bottle flips. To simulate flipping a bottle 100 times, I could instruct my computer to provide 100 simulations. At a technical level, I am modelling bottle flipping as a binomial distribution, and for my simulation I am generating 100 random variates from that distribution.\n\n\nCode\ntotalFlips = 100\nprob = 0.2 # Took me 5 tries to flip the bottle once\nrbinom(totalFlips, 1, prob) # 1 represents a successful flip\n\n\n  [1] 1 0 1 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 0 0\n [38] 0 0 1 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 1 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0\n [75] 1 0 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0\n\n\n\n\nYes, üôÑ I know bottle flipping was a trend way back in 2016. I needed a success/failure example and it was either this of ‚Äúcoin flips‚Äù which I could not bring myself to use\nOr, say I‚Äôm a sports fan and my football team scores an average of 1 goal per game. I could simulate the goals scored over 100 games, by modelling the goals scored by my team after a Poisson distribution, and once again, run my simulation by generating 100 random variates from this distribution.\n\n\nCode\ntotalGames=100\navgGoalsPerGame = 1\nrpois(totalGames,avgGoalsPerGame)\n\n\n  [1] 0 1 2 1 2 2 0 0 1 2 2 0 1 0 1 3 2 2 1 1 2 1 1 1 1 0 4 3 1 0 0 0 2 1 0 1 0\n [38] 0 2 2 1 0 3 1 3 0 0 0 1 1 2 2 1 2 2 0 2 2 0 0 0 1 0 0 2 1 1 2 2 0 3 0 0 0\n [75] 0 0 0 1 1 2 1 2 0 1 3 1 2 0 0 2 2 0 2 1 0 0 2 2 1 1\n\n\nYou get the gist. From models using a single distribution to ones using complex combinations of distributions, our ability to generate random variates allows us to simulate almost any scenario we can think of!\n\n\nHow random variates are generated\nBut, how do computers even produce these random variates? Surely, there can‚Äôt be a specialised function for every one of the infinite distributions out in the world. It turns out that computers have a very simple solution in the form of two ingredients - a pseudorandom uniform generator and the inverse transform theorem.\nA pseudoranom uniform generator is an algorithm that produces random variates from a \\(Unif~(0,1)\\) distribution, producing uniformly random numbers between 0 and 1. There are many different algorithms that can produce uniform random variates and they are judged on how well they can come close to a perfectly random generator. The assortment of different uniform generators each with their pros and cons are interesting, but that will not be the focus of today‚Äôs post. Today, I want to focus on the 2nd ingredient, the inverse transform theorem.\n\n\nInverse Transform Theorem\nThe Inverse Transform Theorem is the backbone behind Inverse Transform Sampling, and is how a uniform distribution is transformed to a diverse range of other distributions.\nMy biggest challenge when I first encountered this theorem was to grasp the key idea behind its simplicity. Here is the theorem:\n\nLet \\(X\\) be a continuous random variable with c.d.f \\(F(x)\\). Then \\(F(X) \\sim Unif(0,1)\\).\n\nAnd, here‚Äôs the equally perplexing simple proof:\n\nLet \\(Y = F(X)\\) and suppose that \\(Y\\) has a c.d.f \\(G(y)\\), then \\[G(y) = P(Y \\leq y) = P(F(Y) \\leq y) \\] \\[ = P(X \\leq F^{-1}(y)) = F(F^{-1}(y)) = y\\]\n\nLet me explain the mechanics of the theorem. This theorem simply states that given we have a cumulative density function of a continuous random variable, the inverse of the CDF function will produce a Uniform distribution. While the usage of the theorem reads like a straight forward recipe, I had so many questions about why the theorem works:\n\nWhy is the theorem and proof so simple?\nHow could this theorem be universally true for any distribution?\nWhy did the theorem introduce the cumulative density function seemingly out of nowhere?\n\n\n\nVisual connection\nAnd what I see as a recurring theme amongst SoME submissions, is that for many mathematical concepts that appear hard to understand in written form, we can achieve some clarity by expressing the ideas in visual form. Here is my go at it.\nHere are a number of cumulative density functions for an assortment of distributions.\n\n\nCode\nnormal <- pnorm\nlogNormal <- plnorm\nexponential <- pexp\n\nggplot() + xlim(-5, 5) + \n  geom_function(fun = pnorm, colour=\"blue\") +\n  geom_function(fun = logNormal, colour=\"brown\") +\n  geom_function(fun = exponential, colour=\"purple\") +\n  labs(title=\"CDFs from an assortment of distributions\")\n\n\n\n\n\nDespite coming in every imaginable shape and size, CDFs for any function have 1 similarity. Their output (y-axis) will always be bound between 0 and 1. This makes a lot of sense when we consider that the CDF is characterised for being a monotonic increasing function. The CDF graphs the probability of \\(P(X<x)\\), given that the output is a probability, the Y axis will always be bounded between 0 and 1. This property is very useful when we match it back to the \\(Unif(0,1)\\) distribution. A uniform distribution produces random variates similarly bound between 0 and 1.\nThe last piece of the puzzle is to understand that just as a function \\(F(x)\\) can be visually described as a transformation mapping values from the X axis to values on the Y axis, and the inverse of that said function \\(F^{-1}(x)\\) is simply the inverse transformation mapping values from the Y axis to the X axis.\n\n\n\n\n\nWhat the inverse function means\n\n\n\n\nSo putting all the pieces together, this is how the Inverse Transform Theorem is put into action:\n\nThe \\(Unif(0,1)\\) distribution produces a random uniform between 0 and 1\nThis is akin to picking a random point on the Y axis of a CDF for your distribution of interest\nThe inverse function \\(F^{-1}(x)\\) maps the random uniform on the Y axis to a value on the X axis\nAnd this X axis value in turn becomes a random variate from your distribution of interest\n\n\n\nConclusion\nThe Inverse Transform Theorem is a remarkable piece of math that links the uniform distribution to just about any other distribution we could think of. It‚Äôs a crucial piece in the machinery of modern machines that enable us to run simulations, and I hope this post helps to share the visual a-ha intuition I experienced when I was learning about this topic.\n\n\n\n\n\nMidjourney AI Art with the prompt of ‚ÄòInverse Transform Theorem‚Äô\n\n\n\n\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{tan2022,\n  author = {Daniel Tan},\n  editor = {},\n  title = {Explainers: {Inverse} {Transform} {Theorem}},\n  date = {2022-08-08},\n  url = {https://www.ddanieltan.com/posts/some2},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nDaniel Tan. 2022. ‚ÄúExplainers: Inverse Transform Theorem.‚Äù\nAugust 8, 2022. https://www.ddanieltan.com/posts/some2."
  },
  {
    "objectID": "posts/blogtips/index.html",
    "href": "posts/blogtips/index.html",
    "title": "How to add some personality to your Quarto Blog",
    "section": "",
    "text": "The basic Quarto blog covers a lot of ground. Here is a detailed walkthrough of how to build a blog with Quarto conducted by Rstudio/Posit, the makers of Quarto. Just following this alone will get you started with a perfectly beautiful and functional blog. \nHowever, your blog is also your personal slice out on the internet, and if you can add just a tad bit of your personality into the content, it makes it more enjoyable for your readers. Here are my favourite tips.\n\n\n\n\n\n\nNote\n\n\n\nWhile it is fun to add these bells and whistles, do not lose focus on the most important part of your blog - the content."
  },
  {
    "objectID": "posts/blogtips/index.html#last-updated",
    "href": "posts/blogtips/index.html#last-updated",
    "title": "How to add some personality to your Quarto Blog",
    "section": "Last Updated",
    "text": "Last Updated\n\n\n\n[1] \"20 September 2022\""
  },
  {
    "objectID": "posts/2022scala/index.html",
    "href": "posts/2022scala/index.html",
    "title": "2022: My Year of Scala",
    "section": "",
    "text": "Neil Gaiman, illustrious author and everlasting source of wit, has a really cool mental exercise to help him complete his projects.\n\nYou don‚Äôt have to write. You have permission to not write, but you don‚Äôt have permission to do anything else.\n\n\nI would go down to my lovely little gazebo at the bottom of the garden, sit down, and I‚Äôm absolutely allowed not to do anything. I‚Äôm allowed to sit at my desk, I‚Äôm allowed to stare out at the world, I‚Äôm allowed to do anything I like, as long as it isn‚Äôt anything. Not allowed to do a crossword, not allowed to read a book, not allowed to phone a friend, not allowed to make a clay model of something. All I‚Äôm allowed to do is absolutely nothing, or write.\n\nFor a couple of years now, I have adapted a version of this exercise to help me complete my learning projects. Every year I make the grand announcement that this will be the year of X. Where X is a learning topic or a new programming language that I wish to focus on.\n\n\nI declared this my year of Scala all the way back in Jan, but I only started this blog in July, which is why this post is published in September üòÖ.\n\n\n\nüéâ 2022 year is my year of Scala! üéâ\n\n\nInspired by Neil‚Äôs rules, my rules for this year are:\n\nFor every project that requires coding, I am going to try and use Scala\nBut, I give myself permission to not use Scala if it is just not the right option for my use case\nHowever, I do not have permission to try out any other shiny new programming language I might be tempted by"
  },
  {
    "objectID": "posts/2022scala/index.html#last-updated",
    "href": "posts/2022scala/index.html#last-updated",
    "title": "2022: My Year of Scala",
    "section": "Last Updated",
    "text": "Last Updated\n\n\n\n[1] \"15 September 2022\""
  },
  {
    "objectID": "posts/stow/index.html",
    "href": "posts/stow/index.html",
    "title": "How I sync my config files with Stow",
    "section": "",
    "text": "I have one machine for work, one machine for personal stuff and a bunch of servers for projects and school work. As I hop in and out of these separate computing systems, it gets pretty difficult to synchronise all my config files, settings, scripts and shortcuts.\n\n\n\n\n\nDallE2 art with prompt: ‚ÄòKeeping things organized across multiple machines, digital art‚Äô\n\n\n\n\nAs this is a common problem that plagues many programmers, it is unsurprising that there is a clever piece of software written to solve this problem - Stow. Stow is a symlink manager that when coupled with any version control software (ie. git) can create a simple and effective config sync system. I have used such a system for the last couple of months and is something I can no longer live without.\n\n\nWhen you‚Äôve written the same code 3 times, write a functionWhen you‚Äôve given the same in-person advice 3 times, write a blog post\n\n‚Äî David Robinson (@drob) November 9, 2017\n\n\nI find myself bringing up Stow pretty often in conversations so I wanted to take @drob‚Äôs advice. However, as there are many excellent blogs that already do a great job explaining what Stow is, I think I can‚Äôt add much value to that conversation. Instead, I‚Äôm going to shift my energy toward creating a straightforward how-to recipe."
  },
  {
    "objectID": "posts/stow/index.html#last-updated",
    "href": "posts/stow/index.html#last-updated",
    "title": "How I sync my config files with Stow",
    "section": "Last Updated",
    "text": "Last Updated\n\n\n\n[1] \"15 September 2022\""
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ü§î",
    "section": "",
    "text": "A few of my favourite bells and whistles\n\n\n\n\n\n\nSeptember 20, 2022\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nHow I added a new tool to my toolbox\n\n\n\n\n\n\nSeptember 15, 2022\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nA simple system to keep chaos at bay\n\n\n\n\n\n\nAugust 27, 2022\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nA #SoME2 submission\n\n\n\n\n\n\nAugust 8, 2022\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nA new hope\n\n\n\n\n\n\nJuly 15, 2022\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Daniel Tan",
    "section": "",
    "text": "I currently work on Experimentation @Apple. Previously, I worked on Personalisation @OCBC AI Labs and on the metasearch auction @TripAdvisor.\nOcassionally, I teach data science workshops @General Assembly and @Vertical Institute."
  }
]