[
  {
    "objectID": "posts/helloworld/index.html",
    "href": "posts/helloworld/index.html",
    "title": "Hello world",
    "section": "",
    "text": "Quarto\nOne reason why I got tempted to start a blog again is Quarto! Quarto is the shiny, new publishing framework (from RStudioPosit) that I use to publish this blog. Quarto is reminiscent of Rmarkdown, but rebuilt around the pandoc engine. Quarto feels purpose built for the entire data community, supporting all the major Data Science languages (Python, R, Julia, Javascript), and supporting a wide spectrum of output formats (pdf reports, websites, presentations and more).\nYou can see my unbridled enthusiasm after first learning about Quarto here.\n\n\n\n\n\n\n‚Ä¶along with my ‚Äúthis-is-a-huge-moment-in-history‚Äù hyperbole\n\n\nJumpstarting this blog\nThese were the best resources I found online to help me jump start this blog.\n\n1. Official Quarto Documentation (website and repos)\nThe official docs are extensive and well-written. Specific to building a blog, I frequently find myself on the website page, publishing page or thumbing through their gallery for inspiration.\n\n\n2. Danielle Navarro‚Äôs ‚ÄúPorting a Distill Blog to Quarto‚Äù (blog and repo)\nDanielle‚Äôs blog post is the perfect starting template. I found her recommended YAML settings, blog theme and deployment instructions very sensible and well-suited for a blog.\n\n\n3. The small but growing collection of Quarto content online\nAt the time of writing, I did not find a large collection of Quarto-specific content online. Nevertheless, I did find some helpful gems from Youtube videos, Github discussions or websites that had a helpful tip or two that I could use for my blog.\n\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{tan2022,\n  author = {Daniel Tan},\n  title = {Hello World},\n  date = {2022-07-15},\n  url = {https://www.ddanieltan.com/posts/helloworld},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nDaniel Tan. 2022. ‚ÄúHello World.‚Äù July 15, 2022. https://www.ddanieltan.com/posts/helloworld."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n‚îÄ‚îÄ Attaching packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 1.3.1 ‚îÄ‚îÄ\n\n\n‚úî ggplot2 3.3.6     ‚úî purrr   0.3.4\n‚úî tibble  3.1.7     ‚úî dplyr   1.0.9\n‚úî tidyr   1.2.0     ‚úî stringr 1.4.0\n‚úî readr   2.1.2     ‚úî forcats 0.5.1\n\n\n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n\n\n\n\nCode\nmpg %>% \n  group_by(model) %>% \n  summarise(n = n())\n\n\n# A tibble: 38 √ó 2\n   model                  n\n   <chr>              <int>\n 1 4runner 4wd            6\n 2 a4                     7\n 3 a4 quattro             8\n 4 a6 quattro             3\n 5 altima                 6\n 6 c1500 suburban 2wd     5\n 7 camry                  7\n 8 camry solara           7\n 9 caravan 2wd           11\n10 civic                  9\n# ‚Ä¶ with 28 more rows\n\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{tan2022,\n  author = {Daniel Tan},\n  title = {Post {With} {Code}},\n  date = {2022-07-18},\n  url = {https://www.ddanieltan.com/posts/post-with-code},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nDaniel Tan. 2022. ‚ÄúPost With Code.‚Äù July 18, 2022. https://www.ddanieltan.com/posts/post-with-code."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ü§î",
    "section": "",
    "text": "A #SomE2 submission\n\n\n\n\n\n\nAugust 8, 2022\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nA new hope\n\n\n\n\n\n\nJuly 15, 2022\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Daniel Tan",
    "section": "",
    "text": "I currently work on Experimentation @Apple. Previously, I worked on Personalisation @OCBC AI Labs and on the metasearch auction @TripAdvisor.\nOcassionally, I teach data science workshops @General Assembly and @Vertical Institute."
  },
  {
    "objectID": "posts/some2/index.html",
    "href": "posts/some2/index.html",
    "title": "Explainers: Inverse Transform Theorem",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\nset.seed(sum(utf8ToInt(\"SoME2\")))\n\n\n\nWorlds at our fingertips\nModern day computers are pretty amazing simulation machines.\nHere‚Äôs an example. Say that I am a Bottle Flipping enthusiast and I am eager to simulate 100 bottle flips. TheAnd, if you could not bring yourself to actually flip a bottle 100 times, we could instead can instruct the computer to provide 100 random variates generated from a binomial distribution.\n\n\nCode\ntotalFlips = 100\nprob = 0.2 # Took me 5 tries to flip the bottle once\nrbinom(totalFlips, 1, prob) # 1 represents a successful flip\n\n\n  [1] 1 0 1 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 0 0\n [38] 0 0 1 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 1 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0\n [75] 1 0 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0\n\n\n\n\nYes, üôÑ I know bottle flipping was a trend way back in 2016. I needed a success/failure example and it was either this of ‚Äúcoin flips‚Äù which I could not bring myself to use\nOr, say I‚Äôm a sports fan and my football team scores an average of 1 goal per game. I could simulate the goals scored over 100 games by calling for 100 random variates from a Poisson distribution.\n\n\nCode\ntotalGames=100\navgGoalsPerGame = 1\nrpois(totalGames,avgGoalsPerGame)\n\n\n  [1] 0 1 2 1 2 2 0 0 1 2 2 0 1 0 1 3 2 2 1 1 2 1 1 1 1 0 4 3 1 0 0 0 2 1 0 1 0\n [38] 0 2 2 1 0 3 1 3 0 0 0 1 1 2 2 1 2 2 0 2 2 0 0 0 1 0 0 2 1 1 2 2 0 3 0 0 0\n [75] 0 0 0 1 1 2 1 2 0 1 3 1 2 0 0 2 2 0 2 1 0 0 2 2 1 1\n\n\nFrom models using a single distribution to ones using complex combinations, the ability to generate random variates to simulate almost any scenario we can think of is stunning.\n\n\nHow random variates are generated\nBut, how do computers even produce these random variates? Surely, there can‚Äôt be a specialised function for every one of the infinite distributions! It turns out that computers have a very simple solution in the form of two ingredients - a pseudorandom uniform generator and the inverse transform theorem.\nA pseudoranom uniform generator is an algorithm that produces random variates from a \\(Unif~(0,1)\\) distribution, producing random numbers between 0 and 1. Essentially, we rely on this generator to capture the ‚Äúrandomness‚Äù quality.\n\n\nThere is an entire family of pseudorandom number generators, and I‚Äôll\nThere‚Äôs an How do computers provide random variates for these multitude of distributions? Certainly, we can‚Äôt expect a dedicated pseudorandom algorithm for every distribution imaginable. Well, it turns out that the rosetta stone of random variate generation starts from a pseudorandom generator for the uniform distribution.\nThe Uniform distribution is a distribution where\n\n\nWe will talk more about the uniform distribution in a future post.\n\n\nInverse Transform Theorem\nShow Nasty derivation\nHow can something so simple be universally applied to every possible distribution?\n\n\nVisual connection\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{tan2022,\n  author = {Daniel Tan},\n  title = {Explainers: {Inverse} {Transform} {Theorem}},\n  date = {2022-08-08},\n  url = {https://www.ddanieltan.com/posts/some2},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nDaniel Tan. 2022. ‚ÄúExplainers: Inverse Transform Theorem.‚Äù\nAugust 8, 2022. https://www.ddanieltan.com/posts/some2."
  }
]